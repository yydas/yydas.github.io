---
// TableOfContents.astro
export interface Props {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
}

const { headings } = Astro.props;
---

<nav class="toc">
  <ul class="space-y-2 text-sm">
    {
      headings.map((heading) => (
        <li
          class:list={[
            "hover:text-blue-500 dark:hover:text-blue-400",
            { "ml-3": heading.depth === 3 },
            { "ml-6": heading.depth === 4 },
            { "ml-9": heading.depth === 5 },
            { "ml-12": heading.depth === 6 },
          ]}
        >
          <a href={`#${heading.slug}`}>{heading.text}</a>
        </li>
      ))
    }
  </ul>
</nav>

<style>
  .toc {
    @apply sticky top-4 max-h-[calc(100vh-2rem)] overflow-auto;
  }
</style>

<script>
  // Highlight current section in TOC
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const id = entry.target.getAttribute("id");
        const tocLink = document.querySelector(`.toc a[href="#${id}"]`);
        
        if (entry.isIntersecting) {
          document.querySelectorAll(".toc a").forEach((link) => {
            link.classList.remove("text-blue-500", "dark:text-blue-400", "font-medium");
          });
          tocLink?.classList.add("text-blue-500", "dark:text-blue-400", "font-medium");
        }
      });
    },
    { rootMargin: "-10% 0px -90% 0px" }
  );

  document.querySelectorAll("h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]").forEach((heading) => {
    observer.observe(heading);
  });
</script> 