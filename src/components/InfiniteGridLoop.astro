---
// InfiniteGridLoop.astro - 无限网格循环组件
import { getCollection } from 'astro:content';

// 获取项目集合数据
const projects = await getCollection('project');

// 将项目数据转换为网格所需格式
const gridItems = projects.map((project, index) => ({
  id: index + 1,
  src: project.data.image,
  alt: project.data.title,
  title: project.data.title,
  description: project.data.description,
  date: project.data.dateFormatted,
  tags: project.data.tags || [],
  slug: project.slug,
  caption: `${project.data.title} <br>${project.data.description} <br>${project.data.dateFormatted}`
}));

// 生成网格布局数据
const generateGridData = (itemCount: number) => {
  const positions = [
    { x: 71, y: 58, w: 400, h: 270 },
    { x: 211, y: 255, w: 540, h: 360 },
    { x: 631, y: 158, w: 400, h: 270 },
    { x: 1191, y: 245, w: 260, h: 195 },
    { x: 351, y: 687, w: 260, h: 290 },
    { x: 751, y: 824, w: 205, h: 154 },
    { x: 911, y: 540, w: 260, h: 350 },
    { x: 1051, y: 803, w: 400, h: 300 },
    { x: 71, y: 922, w: 350, h: 260 },
  ];
  
  return Array.from({ length: itemCount }, (_, index) => {
    const pos = positions[index % positions.length];
    return {
      id: index + 1,
      x: pos.x + (Math.floor(index / positions.length) * 1600), // 水平偏移避免重叠
      y: pos.y,
      w: pos.w,
      h: pos.h
    };
  });
};

const gridData = generateGridData(gridItems.length);
---

<div id="infinite-grid-container" class="w-full h-full">
  <div id="images" class="w-full h-full"></div>
  
  <!-- 将数据传递给客户端 -->
  <script id="grid-sources" type="application/json" set:html={JSON.stringify(gridItems)}></script>
  <script id="grid-data" type="application/json" set:html={JSON.stringify(gridData)}></script>
</div>

<script>
  // 动态加载脚本的函数
  function loadScript(src: string): Promise<void> {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.onload = () => resolve();
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  document.addEventListener('DOMContentLoaded', async () => {
    try {
      await loadScript('/infinite-grid.js');
      
      // 获取数据
      const gridSourcesElement = document.querySelector('#grid-sources');
      const gridDataElement = document.querySelector('#grid-data');
      
      if (!gridSourcesElement || !gridSourcesElement.textContent || 
          !gridDataElement || !gridDataElement.textContent) {
        console.error('Grid data not found');
        return;
      }
      
      const gridSources = JSON.parse(gridSourcesElement.textContent);
      const gridData = JSON.parse(gridDataElement.textContent);
      
      console.log('Grid sources:', gridSources);
      console.log('Grid data:', gridData);
      
      // 初始化无限网格
      new InfiniteGrid({
        el: document.querySelector('#images'),
        sources: gridSources,
        data: gridData,
        originalSize: {w: 1522, h: 1238}
      });
      
    } catch (error) {
      console.error('Failed to initialize InfiniteGrid:', error);
    }
  });
</script>

<style>
  #infinite-grid-container {
    cursor: grab;
  }
  
  #infinite-grid-container.dragging {
    cursor: grabbing;
  }
  
  .item {
    position: absolute;
    top: 0;
    left: 0;
    will-change: transform;
  }
  
  .item-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  .item-image {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
  }
  
  .item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }
  
  .item small {
    position: absolute;
    bottom: 20px;
    left: 20px;
    right: 20px;
    color: white;
    font-size: 12px;
    line-height: 1.4;
    background: rgba(0, 0, 0, 0.7);
    padding: 10px;
    border-radius: 4px;
    backdrop-filter: blur(10px);
    opacity: 0;
    transform: translateY(10px);
    transition: all 0.3s ease;
  }
  
  .item:hover small {
    opacity: 1;
    transform: translateY(0);
  }
</style>