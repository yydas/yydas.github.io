---
import { getCollection } from "astro:content";

const posts = await getCollection("post");
const projects = await getCollection("project");
const currentPath = Astro.url.pathname;

// 判断当前是否在项目页面
const isProjectPage = currentPath.startsWith('/project/');

// 根据页面类型选择要显示的内容
const items = (isProjectPage ? projects : posts) as Array<{
  slug: string;
  data: {
    title: string;
    dateFormatted: string;
  };
}>;

// 按日期排序
const sortedItems = items.sort((a, b) => {
  if (a.data.dateFormatted && b.data.dateFormatted) {
    return new Date(b.data.dateFormatted).getTime() - new Date(a.data.dateFormatted).getTime();
  }
  return a.data.title.localeCompare(b.data.title);
});

// 获取当前路径，如果是首页则使用第一条内容的路径
const effectivePath = currentPath === '/' ? `/${isProjectPage ? 'project' : 'post'}/${sortedItems[0]?.slug}/` : currentPath;

// 将内容按文件夹分组
const groupedItems = sortedItems.reduce((groups, item) => {
  const parts = item.slug.split('/');
  const folder = parts.length > 1 ? parts[0] : '其他';
  if (!groups[folder]) {
    groups[folder] = [];
  }
  groups[folder].push(item);
  return groups;
}, {} as Record<string, typeof items>);

// 对分组进行排序
const sortedGroups = Object.entries(groupedItems).sort(([a], [b]) => {
  if (a === '其他') return -1;
  if (b === '其他') return 1;
  return a.localeCompare(b);
});

// 规范化路径，移除末尾的斜杠并解码 URL
const normalizePath = (path: string) => decodeURIComponent(path.replace(/\/$/, ''));

// 检查路径是否匹配
const isPathMatch = (current: string, target: string) => {
  const normalizedCurrent = normalizePath(current);
  const normalizedTarget = normalizePath(target);
  return normalizedCurrent === normalizedTarget;
};

// 获取列表标题
const listTitle = isProjectPage ? '项目列表' : '文章列表';
---

<nav class="post-list">
  <ul>
    {sortedGroups.map(([folder, items]) => (
      <>
        {folder !== '其他' && (
          <li class="py-2 px-3">
            <h3 class="text-sm font-semibold text-neutral-900 dark:text-neutral-200">{folder}</h3>
          </li>
        )}
        {items.map((item) => {
          const itemPath = `/${isProjectPage ? 'project' : 'post'}/${item.slug}/`;
          const normalizedItemPath = normalizePath(itemPath);
          const isActive = isPathMatch(effectivePath, itemPath);
          return (
            <li class:list={[
              "border-l-2",
              {
                "border-neutral-950 dark:border-neutral-50": isActive,
                "border-neutral-200 dark:border-neutral-800": !isActive
              }
            ]}>
              <a
                href={itemPath}
                class:list={[
                  "block py-2 px-3 text-sm",
                  "hover:bg-gray-100 dark:hover:bg-neutral-900 hover:text-neutral-950 dark:hover:text-neutral-500",
                  {
                    "bg-neutral-200 dark:bg-neutral-800 text-neutral-950 dark:text-neutral-50 font-semibold": isActive,
                    "text-neutral-500": !isActive,
                  },
                ]}
              >
                {item.data.title}
              </a>
            </li>
          )}
        )}
      </>
    ))}
  </ul>
</nav>

<style>
  .post-list {
    @apply w-full max-h-[calc(100vh-8rem)] overflow-y-auto;
  }
</style> 