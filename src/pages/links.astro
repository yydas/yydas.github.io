---
import Layout from "../layouts/main.astro";
import { parseCSVData, getCategories } from "../utils/csv";
import linksData from "../data/links.csv?raw";

const links = parseCSVData(linksData);
const categories = getCategories(links);
const allTags = [...new Set(links.flatMap((link) => link.tags))];
---

<Layout title="网址导航">
  <div class="container mx-auto px-4 py-8">
    <!-- 移动端分类导航 -->
    <div class="xl:hidden mb-6 -mx-4">
      <div class="overflow-x-auto scrollbar-hide">
        <div class="flex whitespace-nowrap px-4 gap-2">
          <button
            class="category-button px-3 py-1.5 text-sm rounded-full bg-neutral-100 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
            data-category="all"
          >
            全部
          </button>
          {
            categories.map((category) => (
              <button
                class="category-button px-3 py-1.5 text-sm rounded-full bg-neutral-100 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                data-category={category}
              >
                {category}
              </button>
            ))
          }
        </div>
      </div>
    </div>

    <div class="flex flex-col lg:flex-row gap-8">
      <!-- 左侧分类和标签 -->
      <div
        class="w-full lg:w-64 space-y-6 lg:sticky lg:top-20 hidden xl:block lg:h-full"
      >
        <!-- 分类列表 -->
        <div>
          <h2 class="text-xl font-semibold mb-4 dark:text-white">分类</h2>
          <ul>
            <li>
              <a
                class="category-button block py-2 px-3 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700 hover:text-neutral-950 dark:hover:text-neutral-50 text-neutral-500 cursor-pointer border-l-2 border-neutral-200 dark:border-neutral-800"
                data-category="all"
              >
                全部
              </a>
            </li>
            {
              categories.map((category) => (
                <li>
                  <a
                    class="category-button block py-2 px-3 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700 hover:text-neutral-950 dark:hover:text-neutral-50 text-neutral-500 cursor-pointer border-l-2 border-neutral-200 dark:border-neutral-800"
                    data-category={category}
                  >
                    {category}
                  </a>
                </li>
              ))
            }
          </ul>
        </div>

        <!-- 标签列表 -->
        <div>
          <h2 class="text-xl font-semibold mb-4 dark:text-white">标签</h2>
          <div class="flex flex-wrap gap-2">
            {
              allTags.map((tag) => (
                <button
                  class="tag-button px-3 py-1 text-sm rounded-full bg-neutral-100 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                  data-tag={tag}
                >
                  {tag}
                </button>
              ))
            }
          </div>
        </div>
      </div>

      <!-- 右侧链接卡片 -->
      <div class="flex-1">
        <div id="categoryTitle" class="mb-6 flex justify-between">
          <h2
            class="hidden lg:block text-2xl font-bold text-gray-900 dark:text-white"
          >
          </h2>
          <!-- 搜索框 -->
          <input
            type="text"
            id="searchInput"
            placeholder="搜索链接..."
            class="h-10 px-3 w-full lg:w-96 text-sm outline-none border rounded-md focus:border-solid focus:ring-0 focus:border-black dark:focus:borders-white border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800 dark:placeholder-neutral-400 dark:text-white hover:border-neutral-800 dark:hover:border-neutral-100 duration-200"
          />
        </div>
        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
          {
            links.map((link) => (
              <a
                href={link.url}
                target="_blank"
                rel="noopener noreferrer"
                class="card link-card group relative p-4 rounded-xl bg-white/80 dark:bg-neutral-900/90 border border-dashed border-neutral-300 dark:border-neutral-600 shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden cursor-pointer no-underline text-inherit animate-fadeInUp opacity-0"
                data-category={link.category}
                data-tags={link.tags.join(",")}
                data-name={link.name}
                data-description={link.description}
              >
                <span class="flex items-center text-neutral-900 dark:text-neutral-100">
                  <h4>{link.name}</h4>
                  <svg
                  class="group-hover:translate-x-0 group-hover:translate-y-0 -rotate-45 translate-y-1 -translate-x-1 w-2.5 h-2.5 stroke-current ml-1 transition-all ease-in-out duration-200 transform z-50"
                  viewBox="0 0 13 15"
                  version="1.1"
                  xmlns="http://www.w3.org/2000/svg"
                  xmlns:xlink="http://www.w3.org/1999/xlink"
                >
                  <g
                    stroke="none"
                    stroke-width="1"
                    fill="none"
                    fill-rule="evenodd"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <g
                      id="svg"
                      transform="translate(0.666667, 2.333333)"
                      stroke="currentColor"
                      stroke-width="2.4"
                    >
                      <g>
                        <polyline
                          class="transition-all duration-200 ease-out opacity-0 delay-0 group-hover:opacity-100"
                          points="5.33333333 0 10.8333333 5.5 5.33333333 11"
                        />
                        <line
                          class="transition-all duration-200 ease-out transform -translate-x-1 opacity-0 group-hover:translate-x-0 group-hover:opacity-100 group-hover:ml-0"
                          x1="10.8333333"
                          y1="5.5"
                          x2="0.833333333"
                          y2="5.16666667"
                        />
                      </g>
                    </g>
                  </g>
                </svg>
                </span>
                
                <p>{link.description}</p>
                <div class="tags">
                  {link.tags.map((tag) => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
                <div class="shine" />
                <div class="background">
                  <div class="tiles">
                    <div class="tile tile-1" />
                    <div class="tile tile-2" />
                    <div class="tile tile-3" />
                    <div class="tile tile-4" />
                    <div class="tile tile-5" />
                    <div class="tile tile-6" />
                    <div class="tile tile-7" />
                    <div class="tile tile-8" />
                    <div class="tile tile-9" />
                    <div class="tile tile-10" />
                  </div>
                  <div class="line line-1" />
                  <div class="line line-2" />
                  <div class="line line-3" />
                </div>
              </a>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* 标题样式 */
  .card h4 {
    z-index: 2;
    position: relative;
    margin-bottom: 4px;
    font-family: inherit;
    font-weight: 600;
    font-size: 14px;
    line-height: 2;
    transition: color 0.3s ease;
  }

  /* 描述文本样式 */
  .card p {
    z-index: 2;
    position: relative;
    margin: 0;
    font-size: 14px;
    line-height: 1.7;
    color: #52525b;
    transition: color 0.3s ease;
  }

  /* 暗色模式描述文本颜色 */
  :global(.dark) .card p {
    color: #a1a1aa;
  }

  /* 背景动画效果 */
  .card .shine {
    border-radius: inherit;
    position: absolute;
    inset: 0;
    z-index: 1;
    overflow: hidden;
    opacity: 0;
    transition: opacity 0.5s;
  }

  .card .shine:before {
    content: "";
    width: 150%;
    padding-bottom: 150%;
    border-radius: 50%;
    position: absolute;
    left: 50%;
    bottom: 55%;
    filter: blur(35px);
    opacity: 0.3;
    transform: translateX(-50%);
    background-image: conic-gradient(
      from 225deg at 50% 50%,
      rgba(16, 185, 129, 0) 0deg,
      #10b981 25deg,
      #edfaf6 285deg,
      #ffffff 345deg,
      rgba(16, 185, 129, 0) 360deg
    );
  }

  /* 暗色模式光效 */
  :global(.dark) .card .shine:before {
    opacity: 0.1;
    background-image: conic-gradient(
      from 205deg at 50% 50%,
      rgba(16, 185, 129, 0) 0deg,
      #10b981 25deg,
      rgba(52, 211, 153, 0.18) 295deg,
      rgba(16, 185, 129, 0) 360deg
    );
  }

  /* 网格背景 */
  .card .background {
    border-radius: inherit;
    position: absolute;
    inset: 0;
    overflow: hidden;
    mask-image: radial-gradient(
      circle at 60% 5%,
      black 0%,
      black 15%,
      transparent 60%
    );
  }

  .card .background .tiles {
    opacity: 0;
    transition: opacity 0.25s;
  }

  .card .background .tiles .tile {
    position: absolute;
    background-color: rgba(16, 185, 129, 0.08);
    animation-duration: 8s;
    animation-iteration-count: infinite;
    opacity: 0;
  }

  /* 暗色模式网格颜色 */
  :global(.dark) .card .background .tiles .tile {
    background-color: rgba(16, 185, 129, 0.05);
  }

  /* 线条动画 */
  .card .background .line {
    position: absolute;
    inset: 0;
    opacity: 0;
    transition: opacity 0.35s;
  }

  .card .background .line:before,
  .card .background .line:after {
    content: "";
    position: absolute;
    background-color: #e9e9e7;
    transition: transform 0.35s;
  }

  /* 暗色模式线条颜色 */
  :global(.dark) .card .background .line:before,
  :global(.dark) .card .background .line:after {
    background-color: #2a2b2c;
  }

  /* 网格位置和动画 */
  .card .background .tiles .tile.tile-4,
  .card .background .tiles .tile.tile-6,
  .card .background .tiles .tile.tile-10 {
    animation-delay: -2s;
  }

  .card .background .tiles .tile.tile-3,
  .card .background .tiles .tile.tile-5,
  .card .background .tiles .tile.tile-8 {
    animation-delay: -4s;
  }

  .card .background .tiles .tile.tile-2,
  .card .background .tiles .tile.tile-9 {
    animation-delay: -6s;
  }

  .card .background .tiles .tile.tile-1 {
    top: 0;
    left: 0;
    height: 10%;
    width: 22.5%;
  }

  .card .background .tiles .tile.tile-2 {
    top: 0;
    left: 22.5%;
    height: 10%;
    width: 27.5%;
  }

  .card .background .tiles .tile.tile-3 {
    top: 0;
    left: 50%;
    height: 10%;
    width: 27.5%;
  }

  .card .background .tiles .tile.tile-4 {
    top: 0;
    left: 77.5%;
    height: 10%;
    width: 22.5%;
  }

  .card .background .tiles .tile.tile-5 {
    top: 10%;
    left: 0;
    height: 22.5%;
    width: 22.5%;
  }

  .card .background .tiles .tile.tile-6 {
    top: 10%;
    left: 22.5%;
    height: 22.5%;
    width: 27.5%;
  }

  .card .background .tiles .tile.tile-7 {
    top: 10%;
    left: 50%;
    height: 22.5%;
    width: 27.5%;
  }

  .card .background .tiles .tile.tile-8 {
    top: 10%;
    left: 77.5%;
    height: 22.5%;
    width: 22.5%;
  }

  .card .background .tiles .tile.tile-9 {
    top: 32.5%;
    left: 50%;
    height: 22.5%;
    width: 27.5%;
  }

  .card .background .tiles .tile.tile-10 {
    top: 32.5%;
    left: 77.5%;
    height: 22.5%;
    width: 22.5%;
  }

  @keyframes tile {
    0%,
    12.5%,
    100% {
      opacity: 1;
    }
    25%,
    82.5% {
      opacity: 0;
    }
  }

  .card .background .line:before {
    left: 0;
    right: 0;
    height: 1px;
    transform-origin: 0 50%;
    transform: scaleX(0);
  }

  .card .background .line:after {
    top: 0;
    bottom: 0;
    width: 1px;
    transform-origin: 50% 0;
    transform: scaleY(0);
  }

  .card .background .line.line-1:before {
    top: 10%;
  }

  .card .background .line.line-1:after {
    left: 22.5%;
  }

  .card .background .line.line-1:before,
  .card .background .line.line-1:after {
    transition-delay: 0.3s;
  }

  .card .background .line.line-2:before {
    top: 32.5%;
  }

  .card .background .line.line-2:after {
    left: 50%;
  }

  .card .background .line.line-2:before,
  .card .background .line.line-2:after {
    transition-delay: 0.15s;
  }

  .card .background .line.line-3:before {
    top: 55%;
  }

  .card .background .line.line-3:after {
    right: 22.5%;
  }

  .card:hover .shine {
    opacity: 1;
    transition-duration: 0.5s;
    transition-delay: 0s;
  }

  .card:hover .background .tiles {
    opacity: 1;
    transition-delay: 0.25s;
  }

  .card:hover .background .tiles .tile {
    animation-name: tile;
  }

  .card:hover .background .line {
    opacity: 1;
    transition-duration: 0.15s;
  }

  .card:hover .background .line:before {
    transform: scaleX(1);
  }

  .card:hover .background .line:after {
    transform: scaleY(1);
  }

  .card:hover .background .line.line-1:before,
  .card:hover .background .line.line-1:after {
    transition-delay: 0s;
  }

  .card:hover .background .line.line-2:before,
  .card:hover .background .line.line-2:after {
    transition-delay: 0.15s;
  }

  .card:hover .background .line.line-3:before,
  .card:hover .background .line.line-3:after {
    transition-delay: 0.3s;
  }

  /* 优化移动端显示 */
  @media (max-width: 768px) {
    .card h4 {
      font-size: 13px;
    }

    .card p {
      font-size: 12px;
    }
  }

  /* 添加加载动画 */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .link-card {
    animation: fadeInUp 0.5s ease forwards;
    opacity: 0;
  }

  .link-card:nth-child(1) {
    animation-delay: 0.1s;
  }
  .link-card:nth-child(2) {
    animation-delay: 0.2s;
  }
  .link-card:nth-child(3) {
    animation-delay: 0.3s;
  }
  .link-card:nth-child(4) {
    animation-delay: 0.4s;
  }
  .link-card:nth-child(5) {
    animation-delay: 0.5s;
  }
  .link-card:nth-child(6) {
    animation-delay: 0.6s;
  }
  .link-card:nth-child(7) {
    animation-delay: 0.7s;
  }
  .link-card:nth-child(8) {
    animation-delay: 0.8s;
  }
  .link-card:nth-child(9) {
    animation-delay: 0.9s;
  }
  .link-card:nth-child(10) {
    animation-delay: 1s;
  }

  /* 标签样式 */
  .card .tags {
    z-index: 2;
    position: relative;
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
    margin-top: 8px;
  }

  .card .tag {
    font-size: 12px;
    padding: 2px 8px;
    border-radius: 12px;
    background-color: rgba(16, 185, 129, 0.1);
    color: #10b981;
    transition: all 0.3s ease;
  }

  /* 暗色模式标签样式 */
  :global(.dark) .card .tag {
    background-color: rgba(16, 185, 129, 0.15);
    color: #34d399;
  }

  /* 卡片悬浮时标签样式 */
  .card:hover .tag {
    background-color: rgba(16, 185, 129, 0.2);
    transform: translateY(-1px);
  }

  /* 暗色模式卡片悬浮时标签样式 */
  :global(.dark) .card:hover .tag {
    background-color: rgba(16, 185, 129, 0.25);
  }

  /* 优化移动端标签显示 */
  @media (max-width: 768px) {
    .card .tags {
      gap: 3px;
    }

    .card .tag {
      font-size: 11px;
      padding: 1px 6px;
    }
  }

  /* 隐藏滚动条但保持可滚动 */
  .scrollbar-hide {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none; /* Chrome, Safari and Opera */
  }

  /* 标签按钮样式 */
  .tag-button {
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .tag-button::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transform: translateX(-100%);
    transition: transform 0.5s ease;
  }

  .tag-button:hover::before {
    transform: translateX(100%);
  }

  /* 暗色模式标签按钮样式 */
  :global(.dark) .tag-button::before {
    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.05), transparent);
  }

  /* 选中状态的标签按钮样式 */
  .tag-button.selected {
    background-color: rgba(16, 185, 129, 0.1);
    color: #10b981;
    font-weight: 500;
  }

  :global(.dark) .tag-button.selected {
    background-color: rgba(16, 185, 129, 0.15);
    color: #34d399;
  }
</style>

<script>
  // 获取所有元素
  const categoryButtons = document.querySelectorAll<HTMLButtonElement>(
    ".category-button[data-category]",
  );
  const tagButtons =
    document.querySelectorAll<HTMLButtonElement>(".tag-button");
  const linkCards = document.querySelectorAll<HTMLElement>(".link-card");
  const searchInput = document.getElementById(
    "searchInput",
  ) as HTMLInputElement;
  const categoryTitle = document.getElementById("categoryTitle") as HTMLElement;
  const categoryTitleText = categoryTitle.querySelector("h2") as HTMLElement;

  // 当前选中的分类和标签
  let selectedCategory = "all";
  let selectedTags: string[] = [];

  // 更新分类按钮样式的函数
  function updateCategoryButtonStyle(button: HTMLButtonElement, isSelected: boolean) {
    if (isSelected) {
      button.classList.add(
        "bg-neutral-200",
        "dark:bg-neutral-800",
        "text-neutral-950",
        "dark:text-neutral-50",
        "font-semibold",
        "border-neutral-950",
        "dark:border-neutral-50",
      );
    } else {
      button.classList.remove(
        "bg-neutral-200",
        "dark:bg-neutral-800",
        "border-neutral-950",
        "dark:border-neutral-50",
        "text-neutral-950",
        "dark:text-neutral-50",
        "font-semibold",
      );
    }
  }

  // 筛选函数
  function filterCards() {
    const searchText = searchInput.value.toLowerCase();

    linkCards.forEach((card) => {
      const category = card.getAttribute("data-category");
      const tags = card.getAttribute("data-tags")?.split(",") || [];
      const name = card.getAttribute("data-name")?.toLowerCase() || "";
      const description =
        card.getAttribute("data-description")?.toLowerCase() || "";

      // 检查分类
      const categoryMatch =
        selectedCategory === "all" || category === selectedCategory;

      // 检查标签
      const tagMatch =
        selectedTags.length === 0 ||
        selectedTags.every((tag) => tags.includes(tag));

      // 检查搜索文本
      const searchMatch =
        searchText === "" ||
        name.includes(searchText) ||
        description.includes(searchText);

      // 显示/隐藏卡片
      if (categoryMatch && tagMatch && searchMatch) {
        card.style.display = "block";
        card.style.animation = "fadeInUp 0.5s ease forwards";
      } else {
        card.style.display = "none";
      }
    });

    // 更新分类标题
    if (selectedCategory === "all") {
      categoryTitleText.textContent = "全部";
    } else {
      categoryTitleText.textContent = selectedCategory;
    }

    // 更新所有分类按钮的样式
    categoryButtons.forEach((button) => {
      const buttonCategory = button.getAttribute("data-category");
      updateCategoryButtonStyle(button, buttonCategory === selectedCategory);
    });
  }

  // 分类按钮点击事件
  categoryButtons.forEach((button) => {
    button.addEventListener("click", () => {
      selectedCategory = button.getAttribute("data-category") || "all";
      filterCards();
    });
  });

  // 标签按钮点击事件
  tagButtons.forEach((button) => {
    button.addEventListener("click", () => {
      const tag = button.getAttribute("data-tag") || "";

      if (selectedTags.includes(tag)) {
        // 取消选中
        selectedTags = selectedTags.filter((t) => t !== tag);
        button.classList.remove("selected");
        button.classList.remove(
          "bg-neutral-950",
          "dark:bg-neutral-50",
          "text-white",
          "dark:text-neutral-950",
          "hover:bg-neutral-800",
          "dark:hover:bg-neutral-200",
        );
        button.classList.add("bg-neutral-100", "dark:bg-neutral-800");
      } else {
        // 选中
        selectedTags.push(tag);
        button.classList.add("selected");
        button.classList.remove("bg-neutral-100", "dark:bg-neutral-800");
        button.classList.add(
          "bg-neutral-950",
          "dark:bg-neutral-50",
          "text-white",
          "dark:text-neutral-950",
          "hover:bg-neutral-800",
          "dark:hover:bg-neutral-200",
        );
      }

      filterCards();
    });
  });

  // 搜索输入事件
  searchInput.addEventListener("input", filterCards);

  // 根据 URL 中的 hash 自动选择分类
  const hash = window.location.hash.slice(1);
  if (hash) {
    const categoryButton = document.querySelector<HTMLButtonElement>(
      `[data-category="${hash}"]`,
    );
    if (categoryButton) {
      categoryButton.click();
    }
  } else {
    // 默认选中"全部"
    const allButton = document.querySelector<HTMLButtonElement>(
      '[data-category="all"]',
    );
    if (allButton) {
      allButton.click();
    }
  }

  // 初始化时调用一次 filterCards 确保样式正确
  filterCards();
</script>
