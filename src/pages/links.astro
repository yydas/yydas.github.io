---
import Layout from "../layouts/main.astro";
import { parseCSVData, getCategories } from "../utils/csv";
import linksData from "../data/links.csv?raw";

const links = parseCSVData(linksData);
const categories = getCategories(links);
const allTags = [...new Set(links.flatMap((link) => link.tags))];
---

<Layout title="网址导航">
  <div class="search-container flex flex-col gap-2 sticky py-12 top-100 z-[11]">
    <!-- 移动端分类导航 -->
    <div class="md:hidden mb-6 -mx-4">
      <div class="overflow-x-auto scrollbar-hide">
        <div class="flex whitespace-nowrap px-4 gap-2">
          <button
            class="category-button px-3 py-1.5 text-sm rounded-full bg-neutral-100 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
            data-category="all"
          >
            全部
          </button>
          {
            categories.map((category) => (
              <button
                class="category-button px-3 py-1.5 text-sm rounded-full bg-neutral-100 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                data-category={category}
              >
                {category}
              </button>
            ))
          }
        </div>
      </div>
    </div>
    <!-- 搜索栏和过滤区域 -->
    <div
      class="flex items-center rounded-xl border border-components-chat-input-border bg-components-panel-bg-blur p-1.5 shadow-md mx-auto w-[640px] shrink-0"
    >
      <!-- 标签下拉按钮 -->
      <div class="shrink-0 relative" data-state="closed">
        <div
          id="tagsDropdownButton"
          class="flex cursor-pointer items-center rounded-lg text-text-tertiary hover:bg-state-base-hover h-8 px-2 py-1"
        >
          <div class="p-0.5">
            <svg
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              fill="currentColor"
              class="remixicon h-4 w-4"
              ><path d="M10 18H14V16H10V18ZM3 6V8H21V6H3ZM6 13H18V11H6V13Z"
              ></path></svg
            >
          </div><div
            id="selectedTagsHeader"
            class="system-sm-medium flex items-center p-1"
          >
            所有标签
          </div><svg
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            fill="currentColor"
            class="remixicon h-4 w-4 dropdown-arrow"
            ><path
              d="M11.9999 13.1714L16.9497 8.22168L18.3639 9.63589L11.9999 15.9999L5.63599 9.63589L7.0502 8.22168L11.9999 13.1714Z"
            ></path></svg
          >
        </div>

        <!-- 标签下拉面板 -->
        <div
          id="tagsDropdown"
          class="tags-dropdown hidden absolute mt-2 ml-1 p-3 bg-white dark:bg-neutral-800 rounded-xl shadow-lg max-h-80 overflow-y-auto w-64 border border-components-chat-input-border z-20"
        >
          <!-- 搜索框 -->
          <div class="mb-3">
            <div class="relative flex items-center">
              <div class="absolute left-3 top-1/2 transform -translate-y-1/2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-4 w-4 text-neutral-400"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                    clip-rule="evenodd"></path>
                </svg>
              </div>
              <input
                id="tagSearchInput"
                class="w-full pl-9 pr-3 py-2 text-sm bg-neutral-100 dark:bg-neutral-700 border-none rounded-lg focus:outline-none focus:ring-1 focus:ring-neutral-400 dark:text-white"
                placeholder="搜索标签..."
              />
            </div>
          </div>

          <!-- 标签列表 -->
          <div class="space-y-1">
            {
              allTags.map((tag) => (
                <div
                  class="tag-item flex h-7 cursor-pointer items-center rounded-lg px-2 py-1.5 hover:bg-state-base-hover"
                  data-tag={tag}
                >
                  <div class="checkbox-container h-4 w-4 cursor-pointer rounded-[4px] border border-components-checkbox-border bg-components-checkbox-bg-unchecked shadow-xs hover:border-components-checkbox-border-hover hover:bg-components-checkbox-bg-unchecked-hover mr-1">
                    <svg
                      viewBox="0 0 24 24"
                      xmlns="http://www.w3.org/2000/svg"
                      width="24"
                      height="24"
                      fill="currentColor"
                      class="remixicon h-3 w-3 hidden"
                    >
                      <path d="M9.9997 15.1709L19.1921 5.97852L20.6063 7.39273L9.9997 17.9993L3.63574 11.6354L5.04996 10.2212L9.9997 15.1709Z" />
                    </svg>
                  </div>
                  <div class="system-sm-medium px-1 text-text-secondary">
                    {tag}
                  </div>
                  <input
                    type="checkbox"
                    id={`tag-${tag}`}
                    class="tag-checkbox absolute opacity-0 invisible"
                    data-tag={tag}
                  />
                </div>
              ))
            }
          </div>
        </div>
      </div>

      <div class="mx-1 h-3.5 w-[1px] bg-divider-regular"></div>
      <div class="relative flex grow items-center p-1 pl-2">
        <div class="mr-2 flex w-full items-center">
          <input
            id="searchInput"
            class="body-md-medium block grow appearance-none bg-transparent text-text-secondary outline-none"
            placeholder="搜索链接..."
            value=""
          />
        </div>
      </div>
    </div>

    <!-- 分类按钮区域 -->
    <div
      class="flex items-center justify-center space-x-2 bg-background-body py-3 sticky top-[56px] z-10 overflow-x-auto scrollbar-hide"
    >
      <div
        class="system-md-medium flex h-8 cursor-pointer items-center rounded-xl border px-3 text-text-tertiary hover:bg-state-base-hover hover:text-text-secondary border-components-main-nav-nav-button-border !bg-components-main-nav-nav-button-bg-active !text-components-main-nav-nav-button-text-active shadow-xs category-button"
        data-category="all"
      >
        全部
      </div>
      {
        categories.map((category) => (
          <div
            class="system-md-medium flex h-8 cursor-pointer items-center rounded-xl border border-transparent px-3 text-text-tertiary hover:bg-state-base-hover hover:text-text-secondary category-button"
            data-category={category}
          >
            {category}
          </div>
        ))
      }
    </div>
  </div>
  <div class="container mx-auto px-4">
    <div class="flex flex-col gap-8">
      <!-- 右侧链接卡片 -->
      <div id="categoryTitle" class="mb-6 flex justify-between mt-4">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white">全部</h2>
      </div>
      <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
        {
          links.map((link) => (
            <a
              href={link.url}
              target="_blank"
              rel="noopener noreferrer"
              class="card link-card group relative p-4 rounded-xl bg-white/80 dark:bg-neutral-900/90 border border-dashed border-neutral-300 dark:border-neutral-600 shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden cursor-pointer no-underline text-inherit animate-fadeInUp opacity-0"
              data-category={link.category}
              data-tags={link.tags.join(",")}
              data-name={link.name}
              data-description={link.description}
            >
              <span class="flex items-center text-neutral-900 dark:text-neutral-100">
                <h4>{link.name}</h4>
                <svg
                  class="group-hover:translate-x-0 group-hover:translate-y-0 -rotate-45 translate-y-1 -translate-x-1 w-2.5 h-2.5 stroke-current ml-1 transition-all ease-in-out duration-200 transform z-50"
                  viewBox="0 0 13 15"
                  version="1.1"
                  xmlns="http://www.w3.org/2000/svg"
                  xmlns:xlink="http://www.w3.org/1999/xlink"
                >
                  <g
                    stroke="none"
                    stroke-width="1"
                    fill="none"
                    fill-rule="evenodd"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <g
                      id="svg"
                      transform="translate(0.666667, 2.333333)"
                      stroke="currentColor"
                      stroke-width="2.4"
                    >
                      <g>
                        <polyline
                          class="transition-all duration-200 ease-out opacity-0 delay-0 group-hover:opacity-100"
                          points="5.33333333 0 10.8333333 5.5 5.33333333 11"
                        />
                        <line
                          class="transition-all duration-200 ease-out transform -translate-x-1 opacity-0 group-hover:translate-x-0 group-hover:opacity-100 group-hover:ml-0"
                          x1="10.8333333"
                          y1="5.5"
                          x2="0.833333333"
                          y2="5.16666667"
                        />
                      </g>
                    </g>
                  </g>
                </svg>
              </span>

              <p>{link.description}</p>
              <div class="tags">
                {link.tags.map((tag) => (
                  <span class="tag">{tag}</span>
                ))}
              </div>
              <div class="shine" />
              <div class="background">
                <div class="tiles">
                  <div class="tile tile-1" />
                  <div class="tile tile-2" />
                  <div class="tile tile-3" />
                  <div class="tile tile-4" />
                  <div class="tile tile-5" />
                  <div class="tile tile-6" />
                  <div class="tile tile-7" />
                  <div class="tile tile-8" />
                  <div class="tile tile-9" />
                  <div class="tile tile-10" />
                </div>
                <div class="line line-1" />
                <div class="line line-2" />
                <div class="line line-3" />
              </div>
            </a>
          ))
        }
      </div>
    </div>
  </div>
</Layout>

<style>
  /* 标题样式 */
  .card h4 {
    z-index: 2;
    position: relative;
    margin-bottom: 4px;
    font-family: inherit;
    font-weight: 600;
    font-size: 14px;
    line-height: 2;
    transition: color 0.3s ease;
  }

  /* 描述文本样式 */
  .card p {
    z-index: 2;
    position: relative;
    margin: 0;
    font-size: 14px;
    line-height: 1.7;
    color: #52525b;
    transition: color 0.3s ease;
  }

  /* 暗色模式描述文本颜色 */
  :global(.dark) .card p {
    color: #a1a1aa;
  }

  /* 背景动画效果 */
  .card .shine {
    border-radius: inherit;
    position: absolute;
    inset: 0;
    z-index: 1;
    overflow: hidden;
    opacity: 0;
    transition: opacity 0.5s;
  }

  .card .shine:before {
    content: "";
    width: 150%;
    padding-bottom: 150%;
    border-radius: 50%;
    position: absolute;
    left: 50%;
    bottom: 55%;
    filter: blur(35px);
    opacity: 0.3;
    transform: translateX(-50%);
    background-image: conic-gradient(
      from 225deg at 50% 50%,
      rgba(16, 185, 129, 0) 0deg,
      #10b981 25deg,
      #edfaf6 285deg,
      #ffffff 345deg,
      rgba(16, 185, 129, 0) 360deg
    );
  }

  /* 暗色模式光效 */
  :global(.dark) .card .shine:before {
    opacity: 0.1;
    background-image: conic-gradient(
      from 205deg at 50% 50%,
      rgba(16, 185, 129, 0) 0deg,
      #10b981 25deg,
      rgba(52, 211, 153, 0.18) 295deg,
      rgba(16, 185, 129, 0) 360deg
    );
  }

  /* 网格背景 */
  .card .background {
    border-radius: inherit;
    position: absolute;
    inset: 0;
    overflow: hidden;
    mask-image: radial-gradient(
      circle at 60% 5%,
      black 0%,
      black 15%,
      transparent 60%
    );
  }

  .card .background .tiles {
    opacity: 0;
    transition: opacity 0.25s;
  }

  .card .background .tiles .tile {
    position: absolute;
    background-color: rgba(16, 185, 129, 0.08);
    animation-duration: 8s;
    animation-iteration-count: infinite;
    opacity: 0;
  }

  /* 暗色模式网格颜色 */
  :global(.dark) .card .background .tiles .tile {
    background-color: rgba(16, 185, 129, 0.05);
  }

  /* 线条动画 */
  .card .background .line {
    position: absolute;
    inset: 0;
    opacity: 0;
    transition: opacity 0.35s;
  }

  .card .background .line:before,
  .card .background .line:after {
    content: "";
    position: absolute;
    background-color: #e9e9e7;
    transition: transform 0.35s;
  }

  /* 暗色模式线条颜色 */
  :global(.dark) .card .background .line:before,
  :global(.dark) .card .background .line:after {
    background-color: #2a2b2c;
  }

  /* 网格位置和动画 */
  .card .background .tiles .tile.tile-4,
  .card .background .tiles .tile.tile-6,
  .card .background .tiles .tile.tile-10 {
    animation-delay: -2s;
  }

  .card .background .tiles .tile.tile-3,
  .card .background .tiles .tile.tile-5,
  .card .background .tiles .tile.tile-8 {
    animation-delay: -4s;
  }

  .card .background .tiles .tile.tile-2,
  .card .background .tiles .tile.tile-9 {
    animation-delay: -6s;
  }

  .card .background .tiles .tile.tile-1 {
    top: 0;
    left: 0;
    height: 10%;
    width: 22.5%;
  }

  .card .background .tiles .tile.tile-2 {
    top: 0;
    left: 22.5%;
    height: 10%;
    width: 27.5%;
  }

  .card .background .tiles .tile.tile-3 {
    top: 0;
    left: 50%;
    height: 10%;
    width: 27.5%;
  }

  .card .background .tiles .tile.tile-4 {
    top: 0;
    left: 77.5%;
    height: 10%;
    width: 22.5%;
  }

  .card .background .tiles .tile.tile-5 {
    top: 10%;
    left: 0;
    height: 22.5%;
    width: 22.5%;
  }

  .card .background .tiles .tile.tile-6 {
    top: 10%;
    left: 22.5%;
    height: 22.5%;
    width: 27.5%;
  }

  .card .background .tiles .tile.tile-7 {
    top: 10%;
    left: 50%;
    height: 22.5%;
    width: 27.5%;
  }

  .card .background .tiles .tile.tile-8 {
    top: 10%;
    left: 77.5%;
    height: 22.5%;
    width: 22.5%;
  }

  .card .background .tiles .tile.tile-9 {
    top: 32.5%;
    left: 50%;
    height: 22.5%;
    width: 27.5%;
  }

  .card .background .tiles .tile.tile-10 {
    top: 32.5%;
    left: 77.5%;
    height: 22.5%;
    width: 22.5%;
  }

  @keyframes tile {
    0%,
    12.5%,
    100% {
      opacity: 1;
    }
    25%,
    82.5% {
      opacity: 0;
    }
  }

  .card .background .line:before {
    left: 0;
    right: 0;
    height: 1px;
    transform-origin: 0 50%;
    transform: scaleX(0);
  }

  .card .background .line:after {
    top: 0;
    bottom: 0;
    width: 1px;
    transform-origin: 50% 0;
    transform: scaleY(0);
  }

  .card .background .line.line-1:before {
    top: 10%;
  }

  .card .background .line.line-1:after {
    left: 22.5%;
  }

  .card .background .line.line-1:before,
  .card .background .line.line-1:after {
    transition-delay: 0.3s;
  }

  .card .background .line.line-2:before {
    top: 32.5%;
  }

  .card .background .line.line-2:after {
    left: 50%;
  }

  .card .background .line.line-2:before,
  .card .background .line.line-2:after {
    transition-delay: 0.15s;
  }

  .card .background .line.line-3:before {
    top: 55%;
  }

  .card .background .line.line-3:after {
    right: 22.5%;
  }

  .card:hover .shine {
    opacity: 1;
    transition-duration: 0.5s;
    transition-delay: 0s;
  }

  .card:hover .background .tiles {
    opacity: 1;
    transition-delay: 0.25s;
  }

  .card:hover .background .tiles .tile {
    animation-name: tile;
  }

  .card:hover .background .line {
    opacity: 1;
    transition-duration: 0.15s;
  }

  .card:hover .background .line:before {
    transform: scaleX(1);
  }

  .card:hover .background .line:after {
    transform: scaleY(1);
  }

  .card:hover .background .line.line-1:before,
  .card:hover .background .line.line-1:after {
    transition-delay: 0s;
  }

  .card:hover .background .line.line-2:before,
  .card:hover .background .line.line-2:after {
    transition-delay: 0.15s;
  }

  .card:hover .background .line.line-3:before,
  .card:hover .background .line.line-3:after {
    transition-delay: 0.3s;
  }

  /* 优化移动端显示 */
  @media (max-width: 768px) {
    .card h4 {
      font-size: 13px;
    }

    .card p {
      font-size: 12px;
    }
  }

  /* 添加加载动画 */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .link-card {
    animation: fadeInUp 0.5s ease forwards;
    opacity: 0;
  }

  .link-card:nth-child(1) {
    animation-delay: 0.1s;
  }
  .link-card:nth-child(2) {
    animation-delay: 0.2s;
  }
  .link-card:nth-child(3) {
    animation-delay: 0.3s;
  }
  .link-card:nth-child(4) {
    animation-delay: 0.4s;
  }
  .link-card:nth-child(5) {
    animation-delay: 0.5s;
  }
  .link-card:nth-child(6) {
    animation-delay: 0.6s;
  }
  .link-card:nth-child(7) {
    animation-delay: 0.7s;
  }
  .link-card:nth-child(8) {
    animation-delay: 0.8s;
  }
  .link-card:nth-child(9) {
    animation-delay: 0.9s;
  }
  .link-card:nth-child(10) {
    animation-delay: 1s;
  }

  /* 标签样式 */
  .card .tags {
    z-index: 2;
    position: relative;
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
    margin-top: 8px;
  }

  .card .tag {
    font-size: 12px;
    padding: 2px 8px;
    border-radius: 12px;
    background-color: rgba(16, 185, 129, 0.1);
    color: #10b981;
    transition: all 0.3s ease;
  }

  /* 暗色模式标签样式 */
  :global(.dark) .card .tag {
    background-color: rgba(16, 185, 129, 0.15);
    color: #34d399;
  }

  /* 卡片悬浮时标签样式 */
  .card:hover .tag {
    background-color: rgba(16, 185, 129, 0.2);
    transform: translateY(-1px);
  }

  /* 暗色模式卡片悬浮时标签样式 */
  :global(.dark) .card:hover .tag {
    background-color: rgba(16, 185, 129, 0.25);
  }

  /* 优化移动端标签显示 */
  @media (max-width: 768px) {
    .card .tags {
      gap: 3px;
    }

    .card .tag {
      font-size: 11px;
      padding: 1px 6px;
    }
  }

  /* 隐藏滚动条但保持可滚动 */
  .scrollbar-hide {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none; /* Chrome, Safari and Opera */
  }

  /* 标签按钮样式 */
  .tag-button {
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .tag-button::before {
    content: "";
    position: absolute;
    inset: 0;
    background: linear-gradient(
      45deg,
      transparent,
      rgba(255, 255, 255, 0.1),
      transparent
    );
    transform: translateX(-100%);
    transition: transform 0.5s ease;
  }

  .tag-button:hover::before {
    transform: translateX(100%);
  }

  /* 暗色模式标签按钮样式 */
  :global(.dark) .tag-button::before {
    background: linear-gradient(
      45deg,
      transparent,
      rgba(255, 255, 255, 0.05),
      transparent
    );
  }

  /* 选中状态的标签按钮样式 */
  .tag-button.selected {
    background-color: rgba(16, 185, 129, 0.1);
    color: #10b981;
    font-weight: 500;
  }

  :global(.dark) .tag-button.selected {
    background-color: rgba(16, 185, 129, 0.15);
    color: #34d399;
  }

  /* 标签下拉菜单 */
  .tags-dropdown {
    scrollbar-width: thin;
    scrollbar-color: rgba(16, 185, 129, 0.4) transparent;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    background-color: #fff;
    border: 1px solid #e5e7eb;
  }

  /* 暗色模式下拉菜单样式 */
  :global(.dark) .tags-dropdown {
    background-color: #1f2937;
    border-color: #374151;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .tags-dropdown::-webkit-scrollbar {
    width: 6px;
  }

  .tags-dropdown::-webkit-scrollbar-track {
    background: transparent;
  }

  .tags-dropdown::-webkit-scrollbar-thumb {
    background-color: rgba(16, 185, 129, 0.4);
    border-radius: 10px;
  }

  /* 标签搜索输入框 */
  #tagSearchInput {
    background-color: #f3f4f6;
    color: #1f2937;
    border: 1px solid transparent;
  }

  #tagSearchInput:focus {
    outline: none;
    border-color: rgba(16, 185, 129, 0.5);
    box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2);
  }

  /* 暗色模式标签搜索输入框 */
  :global(.dark) #tagSearchInput {
    background-color: #374151;
    color: #f3f4f6;
  }

  :global(.dark) #tagSearchInput::placeholder {
    color: #9ca3af;
  }

  /* 标签项目悬停效果 */
  .tag-item:hover {
    background-color: #f3f4f6;
  }

  :global(.dark) .tag-item:hover {
    background-color: #374151;
  }

  /* 选中状态的复选框样式 */
  .checkbox-container.checked {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--components-checkbox-bg);
    color: var(--components-checkbox-icon);
  }

  .checkbox-container.checked:hover {
    background-color: var(--components-checkbox-bg-hover);
  }

  /* 标签项目样式 */
  .tag-item {
    position: relative;
    transition: background-color 0.2s ease;
  }

  /* 暗色模式下的标签文本颜色 */
  :global(.dark) .tag-item .system-sm-medium {
    color: #e5e7eb;
  }

  .tag-item .tag-checkbox {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  /* 分类按钮暗色模式样式 */
  :global(.dark) .category-button {
    border-color: #374151;
    color: #e5e7eb;
  }

  :global(.dark) .category-button:hover {
    background-color: rgba(31, 41, 55, 0.5);
    color: #f3f4f6;
  }

  /* 标签下拉按钮暗色模式样式 */
  :global(.dark) #tagsDropdownButton {
    color: #e5e7eb;
  }

  :global(.dark) #tagsDropdownButton:hover {
    background-color: rgba(31, 41, 55, 0.5);
  }

  /* 确保标签头部在暗色模式下有合适的颜色 */
  :global(.dark) #selectedTagsHeader {
    color: #e5e7eb;
  }

  /* 主搜索输入框暗色模式样式 */
  :global(.dark) #searchInput {
    color: #f3f4f6;
  }

  :global(.dark) #searchInput::placeholder {
    color: #9ca3af;
  }
  .scrolled {
    top: 10px;
  }
</style>

<script>
  // 在DOM完全加载后执行所有操作
  document.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        const SearchContainers = document.querySelectorAll(".search-container");
        SearchContainers.forEach((container) => {
          if (!entry.isIntersecting) {
            container.classList.add("scrolled");
          } else {
            container.classList.remove("scrolled");
          }
        });
      },
      {
        threshold: 0,
        rootMargin: "-1px 0px 0px 0px",
      }
    );
    // 创建一个顶部标记元素来观察
    const topMarker = document.createElement("div");
    topMarker.style.height = "1px";
    topMarker.style.width = "100%";
    topMarker.style.position = "absolute";
    topMarker.style.top = "0";
    topMarker.style.left = "0";

    // 将标记元素添加到文档中并开始观察
    document.body.prepend(topMarker);
    observer.observe(topMarker);
    // 获取所有元素
    const categoryButtons = document.querySelectorAll<HTMLElement>(
      ".category-button[data-category]"
    );
    const tagCheckboxes = document.querySelectorAll<HTMLInputElement>(
      ".tag-checkbox[data-tag]"
    );
    const tagItems = document.querySelectorAll<HTMLElement>(".tag-item");
    const linkCards = document.querySelectorAll<HTMLElement>(".link-card");
    const searchInput = document.getElementById(
      "searchInput"
    ) as HTMLInputElement;
    const tagSearchInput = document.getElementById(
      "tagSearchInput"
    ) as HTMLInputElement;
    const categoryTitle = document.getElementById(
      "categoryTitle"
    ) as HTMLElement;
    const categoryTitleText = categoryTitle.querySelector("h2") as HTMLElement;
    const tagsDropdownButton = document.getElementById(
      "tagsDropdownButton"
    ) as HTMLElement;
    const tagsDropdown = document.getElementById("tagsDropdown") as HTMLElement;
    const selectedTagsHeader = document.getElementById(
      "selectedTagsHeader"
    ) as HTMLElement;

    // 当前选中的分类和标签
    let selectedCategory = "all";
    let selectedTags: string[] = [];

    // 更新分类按钮样式的函数
    function updateCategoryButtonStyle(
      button: HTMLElement,
      isSelected: boolean
    ) {
      if (isSelected) {
        button.classList.add(
          "!bg-components-main-nav-nav-button-bg-active",
          "!text-components-main-nav-nav-button-text-active",
          "border-components-main-nav-nav-button-border",
          "shadow-xs"
        );
        button.classList.remove("border-transparent");
      } else {
        button.classList.remove(
          "!bg-components-main-nav-nav-button-bg-active",
          "!text-components-main-nav-nav-button-text-active",
          "border-components-main-nav-nav-button-border",
          "shadow-xs"
        );
        button.classList.add("border-transparent");
      }
    }

    // 更新标签复选框状态的函数
    function updateTagCheckboxState(
      checkbox: HTMLInputElement,
      isSelected: boolean
    ) {
      checkbox.checked = isSelected;

      // 更新复选框容器的样式
      const tagItem = checkbox.closest(".tag-item") as HTMLElement;
      const checkboxContainer = tagItem.querySelector(
        ".checkbox-container"
      ) as HTMLElement;
      const checkIcon = checkboxContainer.querySelector("svg") as SVGElement;

      if (isSelected) {
        // 选中状态
        checkboxContainer.classList.remove(
          "border",
          "border-components-checkbox-border",
          "bg-components-checkbox-bg-unchecked",
          "hover:border-components-checkbox-border-hover",
          "hover:bg-components-checkbox-bg-unchecked-hover"
        );
        checkboxContainer.classList.add(
          "flex",
          "items-center",
          "justify-center",
          "bg-components-checkbox-bg",
          "text-components-checkbox-icon",
          "hover:bg-components-checkbox-bg-hover"
        );
        checkIcon.classList.remove("hidden");

        // 暗色模式额外样式
        if (document.documentElement.classList.contains("dark")) {
          checkboxContainer.style.backgroundColor = "#10b981";
          checkboxContainer.style.color = "#ffffff";
        } else {
          checkboxContainer.style.backgroundColor = "";
          checkboxContainer.style.color = "";
        }
      } else {
        // 未选中状态
        checkboxContainer.classList.add(
          "border",
          "border-components-checkbox-border",
          "bg-components-checkbox-bg-unchecked",
          "hover:border-components-checkbox-border-hover",
          "hover:bg-components-checkbox-bg-unchecked-hover"
        );
        checkboxContainer.classList.remove(
          "flex",
          "items-center",
          "justify-center",
          "bg-components-checkbox-bg",
          "text-components-checkbox-icon",
          "hover:bg-components-checkbox-bg-hover"
        );
        checkIcon.classList.add("hidden");

        // 清除内联样式
        checkboxContainer.style.backgroundColor = "";
        checkboxContainer.style.color = "";
      }
    }

    // 更新标签头部显示
    function updateTagsHeaderDisplay() {
      if (selectedTags.length === 0) {
        selectedTagsHeader.textContent = "所有标签";
      } else if (selectedTags.length === 1) {
        selectedTagsHeader.textContent = selectedTags[0];
      } else if (selectedTags.length === 2) {
        selectedTagsHeader.textContent = `${selectedTags[0]},${selectedTags[1]}`;
      } else {
        selectedTagsHeader.textContent = `${selectedTags[0]},${selectedTags[1]} +${selectedTags.length - 2}`;
      }
    }

    // 移除标签函数
    function removeTag(tag: string) {
      selectedTags = selectedTags.filter((t) => t !== tag);

      // 更新标签复选框状态
      tagCheckboxes.forEach((checkbox) => {
        const checkboxTag = checkbox.getAttribute("data-tag") || "";
        if (checkboxTag === tag) {
          updateTagCheckboxState(checkbox, false);
        }
      });

      updateTagsHeaderDisplay();
      filterCards();
    }

    // 筛选标签项目的函数
    function filterTagItems() {
      const searchText = tagSearchInput.value.toLowerCase();

      tagItems.forEach((item) => {
        const tagDiv = item.querySelector(
          ".system-sm-medium.px-1.text-text-secondary"
        );
        const tag = tagDiv?.textContent?.toLowerCase() || "";

        if (tag.includes(searchText)) {
          item.style.display = "flex";
        } else {
          item.style.display = "none";
        }
      });
    }

    // 筛选函数
    function filterCards() {
      const searchText = searchInput.value.toLowerCase();

      linkCards.forEach((card) => {
        const category = card.getAttribute("data-category");
        const tags = card.getAttribute("data-tags")?.split(",") || [];
        const name = card.getAttribute("data-name")?.toLowerCase() || "";
        const description =
          card.getAttribute("data-description")?.toLowerCase() || "";

        // 检查分类
        const categoryMatch =
          selectedCategory === "all" || category === selectedCategory;

        // 检查标签：改为 OR 逻辑，只要匹配任意一个选中的标签即可
        const tagMatch =
          selectedTags.length === 0 ||
          selectedTags.some((tag) => tags.includes(tag));

        // 检查搜索文本
        const searchMatch =
          searchText === "" ||
          name.includes(searchText) ||
          description.includes(searchText);

        // 显示/隐藏卡片
        if (categoryMatch && tagMatch && searchMatch) {
          card.style.display = "block";
          card.style.animation = "fadeInUp 0.5s ease forwards";
        } else {
          card.style.display = "none";
        }
      });

      // 更新分类标题
      if (selectedCategory === "all") {
        categoryTitleText.textContent = "全部";
      } else {
        categoryTitleText.textContent = selectedCategory;
      }
    }

    // 分类按钮点击事件
    categoryButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const prevCategory = selectedCategory;
        selectedCategory = button.getAttribute("data-category") || "all";

        // 如果点击的是已经选中的分类，不做任何操作
        if (prevCategory === selectedCategory) return;

        // 更新所有分类按钮样式
        categoryButtons.forEach((btn) => {
          updateCategoryButtonStyle(
            btn,
            btn.getAttribute("data-category") === selectedCategory
          );
        });

        filterCards();
      });
    });

    // 为标签项目及复选框添加点击事件
    tagItems.forEach((item) => {
      // 获取该项目中的复选框和标签文本
      const checkbox = item.querySelector(
        'input[type="checkbox"]'
      ) as HTMLInputElement;
      const checkboxContainer = item.querySelector(
        ".checkbox-container"
      ) as HTMLElement;
      const tag = checkbox.getAttribute("data-tag") || "";

      // 添加标签项目整体的点击事件处理
      item.addEventListener("click", function (e) {
        // 反转复选框状态
        checkbox.checked = !checkbox.checked;

        // 更新选中标签数组
        if (checkbox.checked) {
          if (!selectedTags.includes(tag)) {
            selectedTags.push(tag);
          }
        } else {
          selectedTags = selectedTags.filter((t) => t !== tag);
        }

        // 更新复选框样式
        updateTagCheckboxState(checkbox, checkbox.checked);

        // 更新UI和过滤结果
        updateTagsHeaderDisplay();
        filterCards();
      });
    });

    // 搜索输入事件
    searchInput.addEventListener("input", filterCards);

    // 标签搜索输入事件
    tagSearchInput.addEventListener("input", filterTagItems);

    // 标签下拉菜单事件
    tagsDropdownButton.addEventListener("click", (e) => {
      e.stopPropagation();
      tagsDropdown.classList.toggle("hidden");

      // 切换箭头方向
      const arrow = tagsDropdownButton.querySelector(".dropdown-arrow");
      if (arrow) {
        arrow.classList.toggle("rotate-180");
      }

      // 如果打开下拉菜单，则聚焦搜索框
      if (!tagsDropdown.classList.contains("hidden")) {
        tagSearchInput.focus();
      }
    });

    // 点击页面其他地方关闭下拉菜单
    document.addEventListener("click", (e) => {
      if (
        !tagsDropdownButton.contains(e.target as Node) &&
        !tagsDropdown.contains(e.target as Node)
      ) {
        tagsDropdown.classList.add("hidden");
        const arrow = tagsDropdownButton.querySelector(".dropdown-arrow");
        if (arrow && arrow.classList.contains("rotate-180")) {
          arrow.classList.remove("rotate-180");
        }
      }
    });

    // 阻止下拉菜单内的点击关闭下拉菜单
    tagsDropdown.addEventListener("click", (e) => {
      e.stopPropagation();
    });

    // 根据 URL 中的 hash 自动选择分类
    const hash = window.location.hash.slice(1);
    if (hash) {
      const categoryButton = document.querySelector<HTMLElement>(
        `.category-button[data-category="${hash}"]`
      );
      if (categoryButton) {
        categoryButton.click();
      }
    } else {
      // 默认选中"全部"
      const allButton = document.querySelector<HTMLElement>(
        '.category-button[data-category="all"]'
      );
      if (allButton) {
        updateCategoryButtonStyle(allButton, true);
      }
    }
  });
</script>
